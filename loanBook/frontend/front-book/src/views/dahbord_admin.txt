import { RouterLink } from 'vue-router';
import Footer from '@/components/Footer.vue'
import Header from '../components/header.vue';
import axios from 'axios';
import { useToast } from "vue-toastification";
export default {
  components: { Header,Footer },
  // Initialisation du toast
  setup() {
    // Get toast interface
    const toast = useToast();

    // Make it available inside methods
    return { toast }
  },
  data() {
    return {
      books: [],
      username: localStorage.getItem('username') || '',
      token: localStorage.getItem('token') || '',
      user_id : localStorage.getItem('url'),
      is_admin:localStorage.getItem('is_staff'),
      currentPage: 1,
      limit: 10, // Nombre de livres par page
      offset: 0, // Position de départ
      next: null,
      prev: null,
      totalPages: 0,
      success_message: '',
      wrong_fields: ''
    };
  },
  mounted() {
    const logoutMessage = localStorage.getItem('logoutMessage');
    const borrowMessage = localStorage.getItem('borrowMessage');
    if (logoutMessage) {
      this.successMessage = logoutMessage;
      this.toast.success(logoutMessage);  // Afficher le toast
      localStorage.removeItem('logoutMessage');  // Supprimer le message après l'affichage
    }
    if (borrowMessage) {
      this.successMessage = borrowMessage;
      this.toast.success(borrowMessage);  // Afficher le toast
      localStorage.removeItem('borrowMessage');  // Supprimer le message après l'affichage
    }
    
    if (this.token) {
      axios.defaults.headers.common['Authorization'] = `Token ${this.token}`;
    }

    this.fetchBooks();
  },
  methods: {
    downloadBook(bookID) {
      console.log(this.extractBookId(bookID));
      axios.get(`books/download/${this.extractBookId(bookID)}`, {
        responseType: 'blob', // Pour traiter la réponse en tant que fichier binaire
        headers: {
          'Authorization': `Token ${this.token}`
        }
      }).then((response) => {
        console.log(response);
      const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
      const link = document.createElement('a');
      link.href = url;
      const contentDisposition = response.headers['content-disposition'];
      let fileName = 'downloaded_book.pdf'; // Default filename

      // Extraire le nom de fichier de l'en-tête content-disposition s'il est présent
      if (contentDisposition) {
        const fileNameMatch = contentDisposition.match(/filename="(.+)"/);
        if (fileNameMatch.length === 2) {
          fileName = fileNameMatch[1];
        }
      }

      link.setAttribute('download', fileName);
      document.body.appendChild(link);
      link.click();
      link.remove();
      this.toast.success("Downloaded book");
      console.log('Livre téléchargé');
      }).catch((error) => {
        console.log('Erreur lors du téléchargement', error);
      });
    },

    fetchBooks() {
      axios.get(`books/?limit=${this.limit}&offset=${this.offset}`).then((response) => {
        this.books = response.data.results;
        this.next = response.data.next;
        this.prev = response.data.previous;
        this.totalPages = Math.ceil(response.data.count / this.limit);
        this.currentPage = (this.offset / this.limit) + 1;
      }).catch((error) => {
        console.error('Erreur lors de la récupération des données : ', error);
      });
    },
    nextPage() {
      if (this.next) {
        this.offset += this.limit;
        this.fetchBooks();
      }
    },
    prevPage() {
      if (this.prev) {
        this.offset -= this.limit;
        this.fetchBooks();
      }
    },
    goToPage(page) {
      this.offset = (page - 1) * this.limit;
      this.fetchBooks();
    },

    async deleteBook(book_id) {
      try {
        // Extraire l'ID du livre
        const bookId = this.extractBookId(book_id);

        // Supprimer le livre
        await axios.delete(`books/${bookId}/`, {
          headers: {
            'Content-Type': 'multipart/form-data',
            'Authorization': `Token ${this.token}`
          }
        });

        // Rafraîchir la liste des livres
        this.fetchBooks();

        // Afficher le toast de succès
        this.toast.success("Book successfully deleted");

      } catch (error) {
        if (error.response && error.response.data) {
          this.wrong_fields = "Oups! Something went wrong, please try again";
        }
        console.error('Error:', error.response ? error.response.data : error);
      }
    },
    extractBookId(url) {
      if(url){
        const segments = url.split('/');
        return segments[segments.length - 2]; // L'avant-dernier segment contient l'ID d'un élément
      }
    }
  }
}